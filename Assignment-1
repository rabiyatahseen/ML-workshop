#1.Perform arithmetic operations on NumPy arrays
import numpy as np
a = np.array([1,2,3])
b = np.array([4,5,6])
sum = a + b
print(sum)
subraction = a - b
print(subraction)
multiplication = a * b
print(multiplication)
division = a / b
print(division)
OUTPUT
[5 7 9]
[-3 -3 -3]
[ 4 10 18]
[0.25 0.4  0.5 ]

#2. Write a script to compute the mean and standard deviation of a NumPy array.
import numpy as np 
a = np.array([1,2,3,4,5])
mean = np.mean(a)
print(mean)
std = np.std(a)
print(std)
OUTPUT
3.0
1.4142135623730951

#3. Create a NumPy array of integers from 10 to 50 with a step size of 5.
import numpy as np
array = np.arange(10, 51, 5)
print(array)
OUTPUT
[10 15 20 25 30 35 40 45 50]

#4.Reshape the array into a 2x4 matrix.
import numpy as np
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])
reshaped_arr = arr.reshape(2, 4)
print(reshaped_arr)
OUTPUT
[[1 2 3 4]
 [5 6 7 8]]

# 5.Given the array arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]):
 # Extract the sub-matrix containing the last two rows and first two columns.
import numpy as np
arr = np.array([[1,2,3],[4,5,6],[7,8,9]])
sub_matrix = arr[1:, :2]
print(sub_matrix)
 #Replace all elements greater than 4 with 0.
arr[arr > 4] = 0
print("Modified array:", arr)
OUTPUT
[[4 5]
 [7 8]]
Modified array: [[1 2 3]
 [4 0 0]
 [0 0 0]]

#6.Create two 1D arrays:
# Perform element-wise addition, multiplication, and division
import numpy as np
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
addition = a + b
print(addition)
multiplication = a * b
print(multiplication)
division = a / b
print(division)
OUTPUT
[5 7 9]
[ 4 10 18]
[0.25 0.4  0.5 ]

#7.Create a random NumPy array of size (4, 4). Compute:
# Mean of each column.
# Maximum value of the entire array.
# Sum of all elements
import numpy as np
arr = np.random.rand(4, 4)
column_means = np.mean(arr, axis=0)
max_value = np.max(arr)
sum_of_elements = np.sum(arr)
print("Mean of each column:", column_means)
print("Maximum value:", max_value)
print("Sum of all elements:", sum_of_elements)
OUTPUT
Mean of each column: [0.77664639 0.52233802 0.51741196 0.42281153]
Maximum value: 0.9968668527549224
Sum of all elements: 8.95683162020374

#8.Given the array arr = np.array([1, 2, 3, 4]), add 10 to each element and multiply the result by 2.
import numpy as np
arr = np.array([1, 2, 3, 4])
result = (arr + 10) * 2
print(result)
OUTPUT
[22 24 26 28]

#9.Perform advanced slicing and indexing on a 3D array
import numpy as np
arr = np.random.randint(1,101,size=(3,4,5))
# Extract the second "layer"
second_layer = arr[1, :, :]
print("Second layer:", second_layer)
# Extract the first two rows and the last three columns from each "layer"
sub_array = arr[:, :2, -3:]
print("Sub-array:", sub_array)
# Replace elements divisible by 3 with -1
arr[arr % 3 == 0] = -1
print("Modified array:", arr)
OUTPUT
Second layer: [[31 56 77  7 76]
 [91 46 33 47 85]
 [40 30 54 42 74]
 [44 84 33 50 70]]
Sub-array: [[[59 31 68]
  [92 29  8]]

 [[77  7 76]
  [33 47 85]]

 [[65 69 61]
  [85 95 62]]]
Modified array: [[[56 -1 59 31 68]
  [20 74 92 29  8]
  [68 -1 80 47 61]
  [88 83 58 -1 11]]

 [[31 56 77  7 76]
  [91 46 -1 47 85]
  [40 -1 -1 -1 74]
  [44 -1 -1 50 70]]

 [[-1 25 65 -1 61]
  [89 73 85 95 62]
  [95 74 11 -1 14]
  [-1 -1 25 44 22]]]

#10. Work with broadcasting and advanced operations in NumPy.
import numpy as np
arr = np.random.randint(1, 21, size=(3, 3))
# Subtract the mean of each row from its respective elements
row_means = np.mean(arr, axis=1, keepdims=True)
normalized_arr = arr - row_means
print("Normalized array:", normalized_arr)

# Create a new array by squaring all the elements
squared_arr = arr ** 2
print("Squared array:", squared_arr)

# Find the indices of the top 3 maximum values
flat_arr = arr.flatten()
top_3_indices = np.argpartition(flat_arr, -3)[-3:]
print("Indices of top 3 maximum values:", top_3_indices)
OUTPUT
Normalized array: [[ -2.66666667   4.33333333  -1.66666667]
 [  6.33333333  -2.66666667  -3.66666667]
 [  6.66666667   4.66666667 -11.33333333]]
Squared array: [[169 400 196]
 [324  81  64]
 [361 289   1]]
Indices of top 3 maximum values: [3 6 1]
